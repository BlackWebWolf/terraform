[0m[1mRefreshing Terraform state in-memory prior to plan...[0m
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.
[0m
[0m[1mdata.template_file.user_data: Refreshing state...[0m

------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  [32m+[0m create
[0m
Terraform will perform the following actions:

[32m  [32m+[0m [32maws_key_pair.ecs
[0m      id:                                  <computed>
      fingerprint:                         <computed>
      key_name:                            "ecs-key-acc"
      public_key:                          "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDmgSGbbltEAUJxVMiA0rr5xU2k9Gwr/EeuZLurHfSwreIuWxmS8dl5ETVDj+00l17uMzGaq2f6k1YOeDfIuPIHoSF7rHIHjrTBIXfGNqWoD5kMXPkaiU8f6V4IroC1gyH8ZTUV5TJlzg9ekila+cGTeh3m1ODBzoxjJ+S4+nh338aIt98UEN5nevpF+G/Z1zuILsqnJ5p6M0MgkR5B6nuXE1iYk36xEnh1D/2TQ2LCDhRLfUbHJKn+bdF/nuACwcindT1R02PNWC6+yndpKBUt34oOGt+bZNnZ362/OOoU2DBYzQmVOSiokYIrrNwUQF3scbLQSatqg5ymF0+dZynf wilq@WilqHive"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.aws_ecs_cluster.cluster
[0m      id:                                  <computed>
      name:                                "acc"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.aws_iam_instance_profile.ecs
[0m      id:                                  <computed>
      arn:                                 <computed>
      create_date:                         <computed>
      name:                                "acc_ecs_instance_profile"
      path:                                "/"
      role:                                "acc_ecs_instance_role"
      roles.#:                             <computed>
      unique_id:                           <computed>
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.aws_iam_role.ecs_instance_role
[0m      id:                                  <computed>
      arn:                                 <computed>
      assume_role_policy:                  "{\n  \"Version\": \"2008-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": [\"ec2.amazonaws.com\"]\n      },\n      \"Effect\": \"Allow\"\n    }\n  ]\n}\n"
      create_date:                         <computed>
      force_detach_policies:               "false"
      name:                                "acc_ecs_instance_role"
      path:                                "/"
      unique_id:                           <computed>
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.aws_iam_role.ecs_lb_role
[0m      id:                                  <computed>
      arn:                                 <computed>
      assume_role_policy:                  "{\n  \"Version\": \"2008-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": [\"ecs.amazonaws.com\"]\n      },\n      \"Effect\": \"Allow\"\n    }\n  ]\n}\n"
      create_date:                         <computed>
      force_detach_policies:               "false"
      name:                                "acc_ecs_lb_role"
      path:                                "/ecs/"
      unique_id:                           <computed>
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.aws_iam_role_policy_attachment.ecs_ec2_cloudwatch_role
[0m      id:                                  <computed>
      policy_arn:                          "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
      role:                                "${aws_iam_role.ecs_instance_role.id}"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.aws_iam_role_policy_attachment.ecs_ec2_role
[0m      id:                                  <computed>
      policy_arn:                          "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
      role:                                "${aws_iam_role.ecs_instance_role.id}"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.aws_iam_role_policy_attachment.ecs_lb
[0m      id:                                  <computed>
      policy_arn:                          "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole"
      role:                                "${aws_iam_role.ecs_lb_role.id}"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.aws_security_group_rule.alb_to_ecs
[0m      id:                                  <computed>
      from_port:                           "32768"
      protocol:                            "tcp"
      security_group_id:                   "${module.ecs_instances.ecs_instance_security_group_id}"
      self:                                "false"
      source_security_group_id:            "${module.alb.alb_security_group_id}"
      to_port:                             "61000"
      type:                                "ingress"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.alb.aws_alb.alb
[0m      id:                                  <computed>
      arn:                                 <computed>
      arn_suffix:                          <computed>
      dns_name:                            <computed>
      enable_deletion_protection:          "false"
      idle_timeout:                        "60"
      internal:                            <computed>
      ip_address_type:                     <computed>
      name:                                "acc-acc"
      security_groups.#:                   <computed>
      subnets.#:                           <computed>
      tags.%:                              "1"
      tags.Environment:                    "acc"
      vpc_id:                              <computed>
      zone_id:                             <computed>
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.alb.aws_alb_listener.https
[0m      id:                                  <computed>
      arn:                                 <computed>
      default_action.#:                    "1"
      default_action.0.target_group_arn:   "${aws_alb_target_group.default.id}"
      default_action.0.type:               "forward"
      load_balancer_arn:                   "${aws_alb.alb.id}"
      port:                                "80"
      protocol:                            "HTTP"
      ssl_policy:                          <computed>
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.alb.aws_alb_target_group.default
[0m      id:                                  <computed>
      arn:                                 <computed>
      arn_suffix:                          <computed>
      deregistration_delay:                "300"
      health_check.#:                      "1"
      health_check.0.healthy_threshold:    "5"
      health_check.0.interval:             "30"
      health_check.0.matcher:              "200"
      health_check.0.path:                 "/"
      health_check.0.port:                 "traffic-port"
      health_check.0.protocol:             "HTTP"
      health_check.0.timeout:              "5"
      health_check.0.unhealthy_threshold:  "2"
      name:                                "acc-acc-default"
      port:                                "80"
      protocol:                            "HTTP"
      stickiness.#:                        <computed>
      tags.%:                              "1"
      tags.Environment:                    "acc"
      vpc_id:                              "${var.vpc_id}"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.alb.aws_security_group.alb
[0m      id:                                  <computed>
      description:                         "Managed by Terraform"
      egress.#:                            <computed>
      ingress.#:                           <computed>
      name:                                "acc-acc_alb"
      owner_id:                            <computed>
      tags.%:                              "1"
      tags.Environment:                    "acc"
      vpc_id:                              "${var.vpc_id}"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.alb.aws_security_group_rule.https_from_anywhere
[0m      id:                                  <computed>
      cidr_blocks.#:                       "1"
      cidr_blocks.0:                       "0.0.0.0/0"
      from_port:                           "80"
      protocol:                            "tcp"
      security_group_id:                   "${aws_security_group.alb.id}"
      self:                                "false"
      source_security_group_id:            <computed>
      to_port:                             "80"
      type:                                "ingress"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.alb.aws_security_group_rule.outbound_internet_access
[0m      id:                                  <computed>
      cidr_blocks.#:                       "1"
      cidr_blocks.0:                       "0.0.0.0/0"
      from_port:                           "0"
      protocol:                            "-1"
      security_group_id:                   "${aws_security_group.alb.id}"
      self:                                "false"
      source_security_group_id:            <computed>
      to_port:                             "0"
      type:                                "egress"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.ecs_instances.aws_autoscaling_group.asg
[0m      id:                                  <computed>
      arn:                                 <computed>
      availability_zones.#:                <computed>
      default_cooldown:                    <computed>
      desired_capacity:                    "1"
      force_delete:                        "true"
      health_check_grace_period:           "300"
      health_check_type:                   <computed>
      launch_configuration:                "${aws_launch_configuration.launch.id}"
      max_size:                            "1"
      metrics_granularity:                 "1Minute"
      min_size:                            "1"
      name:                                "acc_acc_default"
      protect_from_scale_in:               "false"
      tag.#:                               "5"
      tag.1757737350.key:                  "Name"
      tag.1757737350.propagate_at_launch:  "true"
      tag.1757737350.value:                "acc_ecs_acc_default"
      tag.2538967553.key:                  "Environment"
      tag.2538967553.propagate_at_launch:  "true"
      tag.2538967553.value:                "acc"
      tag.2545288267.key:                  "InstanceGroup"
      tag.2545288267.propagate_at_launch:  "true"
      tag.2545288267.value:                "default"
      tag.4207884408.key:                  "Cluster"
      tag.4207884408.propagate_at_launch:  "true"
      tag.4207884408.value:                "acc"
      tag.~1516490625.key:                 "DependsId"
      tag.~1516490625.propagate_at_launch: "false"
      tag.~1516490625.value:               "${var.depends_id}"
      target_group_arns.#:                 <computed>
      vpc_zone_identifier.#:               <computed>
      wait_for_capacity_timeout:           "10m"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.ecs_instances.aws_cloudwatch_log_group.audit
[0m      id:                                  <computed>
      arn:                                 <computed>
      name:                                "acc/var/log/ecs/audit.log"
      retention_in_days:                   "30"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.ecs_instances.aws_cloudwatch_log_group.dmesg
[0m      id:                                  <computed>
      arn:                                 <computed>
      name:                                "acc/var/log/dmesg"
      retention_in_days:                   "30"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.ecs_instances.aws_cloudwatch_log_group.docker
[0m      id:                                  <computed>
      arn:                                 <computed>
      name:                                "acc/var/log/docker"
      retention_in_days:                   "30"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.ecs_instances.aws_cloudwatch_log_group.ecs-agent
[0m      id:                                  <computed>
      arn:                                 <computed>
      name:                                "acc/var/log/ecs/ecs-agent.log"
      retention_in_days:                   "30"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.ecs_instances.aws_cloudwatch_log_group.ecs-init
[0m      id:                                  <computed>
      arn:                                 <computed>
      name:                                "acc/var/log/ecs/ecs-init.log"
      retention_in_days:                   "30"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.ecs_instances.aws_cloudwatch_log_group.messages
[0m      id:                                  <computed>
      arn:                                 <computed>
      name:                                "acc/var/log/messages"
      retention_in_days:                   "30"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.ecs_instances.aws_launch_configuration.launch
[0m      id:                                  <computed>
      associate_public_ip_address:         "false"
      ebs_block_device.#:                  <computed>
      ebs_optimized:                       <computed>
      enable_monitoring:                   "true"
      iam_instance_profile:                "${var.iam_instance_profile_id}"
      image_id:                            "ami-95f8d2f3"
      instance_type:                       "t2.micro"
      key_name:                            "ecs-key-acc"
      name:                                <computed>
      name_prefix:                         "acc_acc_default_"
      root_block_device.#:                 <computed>
      security_groups.#:                   <computed>
      user_data:                           "f02424fa13955f1aeca2dc6da38eb4d441b43cf9"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.ecs_instances.aws_security_group.instance
[0m      id:                                  <computed>
      description:                         "Used in acc"
      egress.#:                            <computed>
      ingress.#:                           <computed>
      name:                                "acc_acc_default"
      owner_id:                            <computed>
      tags.%:                              "3"
      tags.Cluster:                        "acc"
      tags.Environment:                    "acc"
      tags.InstanceGroup:                  "default"
      vpc_id:                              "${var.vpc_id}"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.ecs_instances.aws_security_group_rule.outbound_internet_access
[0m      id:                                  <computed>
      cidr_blocks.#:                       "1"
      cidr_blocks.0:                       "0.0.0.0/0"
      from_port:                           "0"
      protocol:                            "-1"
      security_group_id:                   "${aws_security_group.instance.id}"
      self:                                "false"
      source_security_group_id:            <computed>
      to_port:                             "0"
      type:                                "egress"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.network.aws_route.private_nat_route[0]
[0m      id:                                  <computed>
      destination_cidr_block:              "0.0.0.0/0"
      destination_prefix_list_id:          <computed>
      egress_only_gateway_id:              <computed>
      gateway_id:                          <computed>
      instance_id:                         <computed>
      instance_owner_id:                   <computed>
      nat_gateway_id:                      "${element(module.nat.ids, count.index)}"
      network_interface_id:                <computed>
      origin:                              <computed>
      route_table_id:                      "${element(module.private_subnet.route_table_ids, count.index)}"
      state:                               <computed>
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.network.aws_route.private_nat_route[1]
[0m      id:                                  <computed>
      destination_cidr_block:              "0.0.0.0/0"
      destination_prefix_list_id:          <computed>
      egress_only_gateway_id:              <computed>
      gateway_id:                          <computed>
      instance_id:                         <computed>
      instance_owner_id:                   <computed>
      nat_gateway_id:                      "${element(module.nat.ids, count.index)}"
      network_interface_id:                <computed>
      origin:                              <computed>
      route_table_id:                      "${element(module.private_subnet.route_table_ids, count.index)}"
      state:                               <computed>
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.network.aws_route.public_igw_route[0]
[0m      id:                                  <computed>
      destination_cidr_block:              "0.0.0.0/0"
      destination_prefix_list_id:          <computed>
      egress_only_gateway_id:              <computed>
      gateway_id:                          "${module.vpc.igw}"
      instance_id:                         <computed>
      instance_owner_id:                   <computed>
      nat_gateway_id:                      <computed>
      network_interface_id:                <computed>
      origin:                              <computed>
      route_table_id:                      "${element(module.public_subnet.route_table_ids, count.index)}"
      state:                               <computed>
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.network.aws_route.public_igw_route[1]
[0m      id:                                  <computed>
      destination_cidr_block:              "0.0.0.0/0"
      destination_prefix_list_id:          <computed>
      egress_only_gateway_id:              <computed>
      gateway_id:                          "${module.vpc.igw}"
      instance_id:                         <computed>
      instance_owner_id:                   <computed>
      nat_gateway_id:                      <computed>
      network_interface_id:                <computed>
      origin:                              <computed>
      route_table_id:                      "${element(module.public_subnet.route_table_ids, count.index)}"
      state:                               <computed>
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.network.null_resource.dummy_dependency
[0m      id:                                  <computed>
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.network.module.nat.aws_eip.nat[0]
[0m      id:                                  <computed>
      allocation_id:                       <computed>
      association_id:                      <computed>
      domain:                              <computed>
      instance:                            <computed>
      network_interface:                   <computed>
      private_ip:                          <computed>
      public_ip:                           <computed>
      vpc:                                 "true"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.network.module.nat.aws_eip.nat[1]
[0m      id:                                  <computed>
      allocation_id:                       <computed>
      association_id:                      <computed>
      domain:                              <computed>
      instance:                            <computed>
      network_interface:                   <computed>
      private_ip:                          <computed>
      public_ip:                           <computed>
      vpc:                                 "true"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.network.module.nat.aws_nat_gateway.nat[0]
[0m      id:                                  <computed>
      allocation_id:                       "${element(aws_eip.nat.*.id, count.index)}"
      network_interface_id:                <computed>
      private_ip:                          <computed>
      public_ip:                           <computed>
      subnet_id:                           "${element(var.subnet_ids, count.index)}"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.network.module.nat.aws_nat_gateway.nat[1]
[0m      id:                                  <computed>
      allocation_id:                       "${element(aws_eip.nat.*.id, count.index)}"
      network_interface_id:                <computed>
      private_ip:                          <computed>
      public_ip:                           <computed>
      subnet_id:                           "${element(var.subnet_ids, count.index)}"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.network.module.private_subnet.aws_route_table.subnet[0]
[0m      id:                                  <computed>
      propagating_vgws.#:                  <computed>
      route.#:                             <computed>
      tags.%:                              "2"
      tags.Environment:                    "acc"
      tags.Name:                           "acc_private_subnet_eu-central-1a"
      vpc_id:                              "${var.vpc_id}"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.network.module.private_subnet.aws_route_table.subnet[1]
[0m      id:                                  <computed>
      propagating_vgws.#:                  <computed>
      route.#:                             <computed>
      tags.%:                              "2"
      tags.Environment:                    "acc"
      tags.Name:                           "acc_private_subnet_eu-central-1b"
      vpc_id:                              "${var.vpc_id}"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.network.module.private_subnet.aws_route_table_association.subnet[0]
[0m      id:                                  <computed>
      route_table_id:                      "${element(aws_route_table.subnet.*.id, count.index)}"
      subnet_id:                           "${element(aws_subnet.subnet.*.id, count.index)}"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.network.module.private_subnet.aws_route_table_association.subnet[1]
[0m      id:                                  <computed>
      route_table_id:                      "${element(aws_route_table.subnet.*.id, count.index)}"
      subnet_id:                           "${element(aws_subnet.subnet.*.id, count.index)}"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.network.module.private_subnet.aws_subnet.subnet[0]
[0m      id:                                  <computed>
      assign_ipv6_address_on_creation:     "false"
      availability_zone:                   "eu-central-1a"
      cidr_block:                          "10.0.50.0/24"
      ipv6_cidr_block:                     <computed>
      ipv6_cidr_block_association_id:      <computed>
      map_public_ip_on_launch:             "false"
      tags.%:                              "2"
      tags.Environment:                    "acc"
      tags.Name:                           "acc_private_subnet_eu-central-1a"
      vpc_id:                              "${var.vpc_id}"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.network.module.private_subnet.aws_subnet.subnet[1]
[0m      id:                                  <computed>
      assign_ipv6_address_on_creation:     "false"
      availability_zone:                   "eu-central-1b"
      cidr_block:                          "10.0.51.0/24"
      ipv6_cidr_block:                     <computed>
      ipv6_cidr_block_association_id:      <computed>
      map_public_ip_on_launch:             "false"
      tags.%:                              "2"
      tags.Environment:                    "acc"
      tags.Name:                           "acc_private_subnet_eu-central-1b"
      vpc_id:                              "${var.vpc_id}"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.network.module.public_subnet.aws_route_table.subnet[0]
[0m      id:                                  <computed>
      propagating_vgws.#:                  <computed>
      route.#:                             <computed>
      tags.%:                              "2"
      tags.Environment:                    "acc"
      tags.Name:                           "acc_public_subnet_eu-central-1a"
      vpc_id:                              "${var.vpc_id}"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.network.module.public_subnet.aws_route_table.subnet[1]
[0m      id:                                  <computed>
      propagating_vgws.#:                  <computed>
      route.#:                             <computed>
      tags.%:                              "2"
      tags.Environment:                    "acc"
      tags.Name:                           "acc_public_subnet_eu-central-1b"
      vpc_id:                              "${var.vpc_id}"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.network.module.public_subnet.aws_route_table_association.subnet[0]
[0m      id:                                  <computed>
      route_table_id:                      "${element(aws_route_table.subnet.*.id, count.index)}"
      subnet_id:                           "${element(aws_subnet.subnet.*.id, count.index)}"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.network.module.public_subnet.aws_route_table_association.subnet[1]
[0m      id:                                  <computed>
      route_table_id:                      "${element(aws_route_table.subnet.*.id, count.index)}"
      subnet_id:                           "${element(aws_subnet.subnet.*.id, count.index)}"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.network.module.public_subnet.aws_subnet.subnet[0]
[0m      id:                                  <computed>
      assign_ipv6_address_on_creation:     "false"
      availability_zone:                   "eu-central-1a"
      cidr_block:                          "10.0.0.0/24"
      ipv6_cidr_block:                     <computed>
      ipv6_cidr_block_association_id:      <computed>
      map_public_ip_on_launch:             "false"
      tags.%:                              "2"
      tags.Environment:                    "acc"
      tags.Name:                           "acc_public_subnet_eu-central-1a"
      vpc_id:                              "${var.vpc_id}"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.network.module.public_subnet.aws_subnet.subnet[1]
[0m      id:                                  <computed>
      assign_ipv6_address_on_creation:     "false"
      availability_zone:                   "eu-central-1b"
      cidr_block:                          "10.0.1.0/24"
      ipv6_cidr_block:                     <computed>
      ipv6_cidr_block_association_id:      <computed>
      map_public_ip_on_launch:             "false"
      tags.%:                              "2"
      tags.Environment:                    "acc"
      tags.Name:                           "acc_public_subnet_eu-central-1b"
      vpc_id:                              "${var.vpc_id}"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.network.module.vpc.aws_internet_gateway.vpc
[0m      id:                                  <computed>
      tags.%:                              "1"
      tags.Environment:                    "acc"
      vpc_id:                              "${aws_vpc.vpc.id}"
[0m
[0m[32m  [32m+[0m [32mmodule.ecs.module.network.module.vpc.aws_vpc.vpc
[0m      id:                                  <computed>
      assign_generated_ipv6_cidr_block:    "false"
      cidr_block:                          "10.0.0.0/16"
      default_network_acl_id:              <computed>
      default_route_table_id:              <computed>
      default_security_group_id:           <computed>
      dhcp_options_id:                     <computed>
      enable_classiclink:                  <computed>
      enable_classiclink_dns_support:      <computed>
      enable_dns_hostnames:                "true"
      enable_dns_support:                  "true"
      instance_tenancy:                    <computed>
      ipv6_association_id:                 <computed>
      ipv6_cidr_block:                     <computed>
      main_route_table_id:                 <computed>
      tags.%:                              "2"
      tags.Environment:                    "acc"
      tags.Name:                           "acc"
[0m
[0m
[0m[1mPlan:[0m 48 to add, 0 to change, 0 to destroy.[0m

------------------------------------------------------------------------

Note: You didn't specify an "-out" parameter to save this plan, so Terraform
can't guarantee that exactly these actions will be performed if
"terraform apply" is subsequently run.

